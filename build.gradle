plugins {
    id 'java'
    id 'eclipse'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.8'
    id "xyz.jpenilla.run-velocity" version "2.3.1"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'com.openmc.plugin'
version = '0.3.0'

repositories {
    mavenCentral()
    maven { name = "papermc-repo"; url = "https://repo.papermc.io/repository/maven-public/" }
    maven { name = "sonatype"; url = "https://oss.sonatype.org/content/groups/public/" }
    maven { name = "exceptionflug"; url = 'https://mvn.exceptionflug.de/repository/exceptionflug-public/' }
}

dependencies {
    compileOnly 'com.velocitypowered:velocity-api:3.4.0-SNAPSHOT'

    compileOnly 'com.zaxxer:HikariCP:6.3.0'
    compileOnly 'com.mysql:mysql-connector-j:9.3.0'
    compileOnly 'org.postgresql:postgresql:42.7.7'
    compileOnly 'com.github.ben-manes.caffeine:caffeine:3.1.8'

    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    testCompileOnly 'org.projectlombok:lombok:1.18.38'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'com.velocitypowered:velocity-api:3.4.0-SNAPSHOT'
}

tasks {
    runVelocity {
        velocityVersion("3.4.0-SNAPSHOT")
    }

    shadowJar {
        archiveClassifier.set('')
        mergeServiceFiles()
        manifest {
            attributes 'Main-Class': 'com.openmc.judicator.Judicator'
        }
    }

    build {
        dependsOn shadowJar
    }
}

def targetJavaVersion = 17
java {
    toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release.set(targetJavaVersion)
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = ['version': project.version]
    task.inputs.properties props
    task.from templateSource
    task.into templateDest
    task.expand props
}
sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })
project.idea.project.settings.taskTriggers.afterSync generateTemplates
project.eclipse.synchronizationTasks(generateTemplates)
